;;;###autoload
(defun fdx/refactoring/extract-let ()
  "Extract a let from an assignment"
  (interactive)
  (save-excursion
    (beginning-of-line)
    (forward-word)
    (backward-word)
    (insert "let(:")
    (search-forward "=")
    (delete-backward-char 1)
    (insert " ")
    (backward-word)
    (forward-word)
    (insert ")")
    (forward-char)
    (insert "{ ")
    (end-of-line)
    (insert " }")
    (beginning-of-line)
    (forward-word)
    (backward-word)
    (while (search-forward-regexp " +" (line-end-position) t)
      (replace-match " " nil nil)
      )))

;;;###autoload
(defun fdx/refactoring/extract-method (beg end)
  "Extract the selected text as a method"
  (interactive "r")
  (save-excursion
    (let ((body (buffer-substring beg end))
          (method-name (read-string "Enter method name: ")))
      (deactivate-mark)
      (delete-region beg end)
      (insert method-name)
      (search-backward-regexp "^ *def *")
      (beginning-of-line)
      (insert "def ")
      (insert method-name)
      (insert "\n")
      (insert body)
      (insert "\n")
      (insert "end")
      (insert "\n")
      (insert "\n")
      (search-backward-regexp "^ *def *")
      (fdx/reindent-buffer)
      )))
